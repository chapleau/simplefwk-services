{"name":"Simple framework","tagline":"","body":"#**Services** [Utility Tools][]\r\n\r\n``simplefwk-services`` is a small package containing a simple event handling service as well as a lightweight message service that is intended to be used as a message logger. Native C++ interfaces are provided. Python interfaces are also available and automatically generate by [swig][].\r\n\r\n##Installation\r\n\r\nA makefile is provided for unix-like operating systems (tested on Mac OS X 10.7.5). Requirements: \r\n* C++11 compliant c++ compiler (e.g. g++ 4.8)\r\n* Python 2.x (e.g. version 2.7.1)\r\n* swig 2.x \r\n\r\nAll the above can be obtained through [macports][] for Max OS X systems.\r\n\r\n## Usage\r\n\r\n### Message Service\r\n \r\nThe Message service is implemented as a singleton that outputs formatted text messages to a user defined stream. It keeps track of the number of messages (and levels) that are issued. Classes that require the use of this logging mechanism simply need to inherit from the ``Messaging`` class. :\r\n\r\n```c++\r\n#include \"Services/Messaging.h\"\r\n#include <iostream>\r\n\r\nclass tool : public Messaging {\r\n\r\n public:\r\n // n is name of instance\r\n tool(const std::string & n) : Messaging(n) {}\r\n\r\n void foo() { LOG(\"Here's an INFO  message from \"<<this->name(), logINFO); }\r\n void bar() { LOG(\"Here's a WARNING message from \"<<this->name(), logWARNING); }\r\n void foobar() { LOG(\"Here's an ERROR message from \"<<this->name(), logERROR); }\r\n\r\n};\r\n\r\nint main() {\r\n\r\ntool mytoolA(\"MyToolA\");\r\ntool mytoolB(\"MyToolB\");\r\n\r\nmytoolA.foo();\r\nmytoolB.bar();\r\n\r\ntry {\r\n mytoolA.foobar();\r\n}\r\ncatch(const std::exception & e) {\r\n std::cerr<<\"caught exception: \"<<e.what()<<std::endl;\r\n}\r\n\r\nreturn 0;\r\n}\r\n```\r\n\r\nwill produce the following output:\r\n\r\n![Alt console output][msgoutput]\r\n\r\nIt is also possible to specifify a default minimum log level through ``Messaging``'s alternate constructor. \r\n\r\nAn error message throws a run time exception by default that is necesary to catch. \r\n\r\n### Incident Service\r\n\r\nThe Incident Service is a simple implementation of the [observer design pattern] [obs]. It is based on an implementation available in a software framework (known as [Gaudi][]) used in high energy physics experiments. \r\n\r\nThe service is implemented as a singleton. Observers (or _listeners_) can be registered to the incident service for any type of events (or _incidents_). When fireing a particular incident, all registered listeners are notified. Listeners are concrete implementations of the ``IIncidentListener`` interface, e.g.: \r\n\r\n```c++\r\n#include \"Services/Messaging.h\"\r\n#include \"Services/IIncidentListener.h\"\r\n#include \"Services/IncidentService.h\"\r\n\r\nclass tool : public Messaging, virtual public IIncidentListener {\r\n\r\n public:\r\n // n is name of instance\r\n tool(const std::string & n) : Messaging(n) {}\r\n //concrete implementation\r\n void handle(const Incident& inc) { foo(inc.svcType()); }\r\n\r\n protected: \r\n void foo(const std::string & str) { LOG(\"Here's an INFO message from incident \"<<str, logINFO); }\r\n\r\n};\r\n\r\nint main() {\r\n\r\ntool mytoolA(\"MyToolA\");\r\n\r\n//get an handle on the singleton\r\nIncidentService * inc_svc = IncidentService::getInstance();\r\n//set log level to DEBUG\r\ninc_svc->SetReportingLevel(logDEBUG);\r\n//add listeners\r\ninc_svc->addListener(&mytoolA, \"TestEvent\");\r\ninc_svc->addListener(&mytoolA, \"AnotherTestEvent\");\r\n//fire!\r\ninc_svc->fireIncident(Incident(\"TestEvent\"));\r\ninc_svc->fireIncident(Incident(\"AnotherTestEvent\"));\r\n\r\n//clean exit\r\ninc_svc->kill();\r\nreturn 0;\r\n}\r\n```\r\n\r\nThe above produces the following output:\r\n\r\n![Alt console output][incoutput]\r\n\r\n[swig]: http://swig.org\r\n[macports]: http://www.macports.org/\r\n[obs]: http://en.wikipedia.org/wiki/Observer_pattern\r\n[Gaudi]: http://cern.ch/gaudi\r\n[msgoutput]: https://raw.github.com/chapleau/simplefwk-services/master/doc/console.png\r\n[incoutput]: https://raw.github.com/chapleau/simplefwk-services/master/doc/console_inc.png\r\n[Utility Tools]: http://chapleau.github.io/simplefwk-utilitytools/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}